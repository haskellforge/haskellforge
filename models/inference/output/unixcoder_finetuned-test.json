{"input": "<s> -- | Difference props <EOL> prop_difference_subset :: Set Int -> Set Int -> Bool <EOL> prop_difference_subset a b = s `subSet`", "gt": "a where s = a `differenceSet` b", "prediction": " s ` subset` b == s"}
{"input": "<s> -- | Creates a value of 'ListTagsForResource' with the minimum fields required to make a request. <EOL> -- <EOL> -- Use one of the following lenses to modify other fields as desired: <EOL> -- <EOL> -- * 'ltfrFilters' <EOL> -- <EOL> -- * 'ltfrResourceName' <EOL> listTagsForResource <EOL>     ::", "gt": "Text -- ^ 'ltfrResourceName'", "prediction": " L -- ^ 'ltfrResourceName'"}
{"input": "<s> -- READ <EOL> allUser ::", "gt": "Action IO [Document]", "prediction": " AppHandler ()"}
{"input": "<s> -- Euler 49 <EOL> euler49 :: String <EOL> euler49 = result $ last $ filter isPermutation [(a , b, c) | a <-", "gt": "primes1000, let b = a + 3330, let c = b + 3330, b `elem` primes1000, c `elem` primes1000]", "prediction": " [1..100], b <- [1..100], c <- [1..100]]"}
{"input": "<s> -- === Utils === -- <EOL> attr :: HasAttr a t => a -> Lens' t (Attr a t) <EOL> attr a =", "gt": "lens (getter a) (flip $ setter a)", "prediction": " lens _attr (\\b c -> b { _attr = c })"}
{"input": "<s> -- getSubOption : like findSubOption but use the given option if none is found in the list <EOL>     getSubOption :: SubOption subOption => [subOption] -> subOption -> subOption <EOL>     getSubOption", "gt": "opts opt = fromMaybe opt $ find (matchSubOption opt) opts", "prediction": " [] s = s"}
{"input": "<s> -- Actual program logic <EOL> run :: Options -> IO () <EOL> run (Options cmd) = <EOL>     case cmd of <EOL>         Ca h k l-> do <EOL>            print (solution /~~ degree) <EOL>            dispv (computeHkl e4c solution lattice) <EOL>            disp path <EOL>                where <EOL>                  (sol, path) = computeAngles e4c angles lattice mode [h, k, l] <EOL>                  s = [30.0, 0.0, 0.0, 0.0, 10.0, 0.0] <EOL>                  d = [60.0] <EOL>                  angles", "gt": "= (s ++ d) *~~ degree", "prediction": " ="}
{"input": "<s> -- | The unique Amazon Resource Name of the disabled gateway. <EOL> dgr1GatewayARN :: Lens'", "gt": "DisableGatewayResponse (Maybe Text)", "prediction": " DisableGatewayResponse (Maybe Text)"}
{"input": "<s> -- | The external workflow execution for which the cancellation was <EOL> -- requested. <EOL> wecreaExternalWorkflowExecution :: Lens' WorkflowExecutionCancelRequestedEventAttributes", "gt": "(Maybe WorkflowExecution)", "prediction": " (Maybe ExternalWorkflowExecution)"}
{"input": "<s> -- | Indicates whether source\\/destination checking is enabled. A value of <EOL> -- 'true' means checking is enabled, and 'false' means checking is <EOL> -- disabled. This value must be 'false' for a NAT instance to perform NAT. <EOL> drsSourceDestCheck :: Lens' DescribeInstanceAttributeResponse (Maybe AttributeBooleanValue) <EOL> drsSourceDestCheck = lens _drsSourceDestCheck (\\ s a ->", "gt": "s{_drsSourceDestCheck = a})", "prediction": " s{_drsSourceDestCheck = a})"}
{"input": "<s> -- | Creates a value of 'ListDeploymentConfigsResponse' with the minimum fields required to make a request. <EOL> -- <EOL> -- Use one of the following lenses to modify other fields as desired: <EOL> -- <EOL> -- * 'ldcrsNextToken' <EOL> -- <EOL> -- * 'ldcrsDeploymentConfigsList' <EOL> -- <EOL> -- * 'ldcrsResponseStatus' <EOL> listDeploymentConfigsResponse <EOL>     :: Int -- ^ 'ldcrsResponseStatus' <EOL>     -> ListDeploymentConfigsResponse <EOL> listDeploymentConfigsResponse pResponseStatus_ = <EOL>     ListDeploymentConfigsResponse' <EOL>     { _ldcrsNextToken = Nothing <EOL>     , _ldcrsDeploymentConfigsList = Nothing <EOL>     ,", "gt": "_ldcrsResponseStatus = pResponseStatus_", "prediction": " _ldcrsResponseStatus = pResponseStatus_"}
{"input": "<s> f2 :: Func --Para esta funcion probar con n = 6 que es el ejercicio del parcial <EOL> f2 = FMult", "gt": "(FExp (FSum (FMult (FConst (-1)) (FVar 'x')) (FConst 3))) (FLn (FVar 'x'))", "prediction": " 6"}
{"input": "<s> -- Use hi-res POSIX time <EOL> ctimespecToPosixSeconds :: CTimespec -> POSIXTime <EOL> ctimespecToPosixSeconds (MkCTimespec (CTime", "gt": "s) ns) =", "prediction": " t) _) = t"}
{"input": "<s> -- | Post to /cves <EOL> postCves", "gt": ":: [Cve] -> App T.Text", "prediction": "R :: Handler Html"}
{"input": "<s> toGCode' :: IRInstruction                       -- ^ The instruction to compile  <EOL>         -> TrackedPosition GCodeInstruction     -- ^ The resulting 'GCode' instruction <EOL> toGCode' (Move (V3 x y z) Rapid)", "gt": "= return $ G00 (Just x) (Just y) (Just z)", "prediction": " = do"}
{"input": "<s> sendTo :: Socket      -- ^ Socket <EOL>        -> ByteString  -- ^ Data", "gt": "to send", "prediction": " to send"}
{"input": "<s> -- Responses <EOL> testDeleteStreamingDistributionResponse :: DeleteStreamingDistributionResponse -> TestTree <EOL> testDeleteStreamingDistributionResponse", "gt": "= res", "prediction": " = res"}
{"input": "<s> -- | The name of the on-premises instance to get information about <EOL> gopiInstanceName :: Lens' GetOnPremisesInstance Text <EOL> gopiInstanceName = lens _gopiInstanceName", "gt": "(\\s a -> s { _gopiInstanceName = a })", "prediction": " (\\s a -> s { _pmuiInstanceName = a })"}
{"input": "<s> -- | Determine whether the pattern matches the argument <EOL> -- If so return the appropriate substitution <EOL> patternMatches :: Arg -> Pattern -> TcMonad [(TName, Term)] <EOL> patternMatches (Arg", "gt": "t) (PatVar x) = return [(x, t)]", "prediction": " name) (Pattern p') = do"}
{"input": "<s> -- | Association list of formats and writers. <EOL> writers :: [ ( String, Writer ) ] <EOL> writers = [ <EOL>    (\"native\"       , PureStringWriter writeNative) <EOL>   ,(\"json\"         , PureStringWriter writeJSON) <EOL>   ,(\"docx\"         , IOByteStringWriter writeDocx) <EOL>   ,(\"odt\"          , IOByteStringWriter writeODT) <EOL>   ,(\"epub\"         , IOByteStringWriter $ \\o -> <EOL>                       writeEPUB o{ writerEpubVersion =", "gt": "Just EPUB2 })", "prediction": " E \"1.0\""}
{"input": "<s> -- | <https://developer.mozilla.org/en-US/docs/Web/API/ByteLengthQueuingStrategy.size Mozilla ByteLengthQueuingStrategy.size documentation>  <EOL> size :: (MonadDOM m) => ByteLengthQueuingStrategy -> m Double <EOL> size self = liftDOM ((self ^. jsf \"size\"", "gt": "()) >>= valToNumber)", "prediction": " ) >>= \\case"}
{"input": "<s> -------------------------------------------------------------------------------- <EOL> -- ** HMAC-SHA1 <EOL> -------------------------------------------------------------------------------- <EOL> hmac :: SArr", "gt": "SWord8 -> SArr SWord8 -> Software (SArr SWord8)", "prediction": " (Word8, Word8, Word8) Word8"}
{"input": "<s> {- <EOL>  - The part from which the vessel is controlled. <EOL>  -} <EOL> setPartsControlling :: KRPCHS.SpaceCenter.Parts -> KRPCHS.SpaceCenter.Part ->", "gt": "RPCContext ()", "prediction": " IO ()"}
{"input": "<s> -- | <https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker.lastChild Mozilla TreeWalker.lastChild documentation>  <EOL> lastChild :: (MonadDOM m) => TreeWalker -> m (Maybe Node) <EOL> lastChild self <EOL>   = liftDOM ((self ^. jsf \"lastChild\" ())", "gt": ">>= fromJSVal)", "prediction": " >>= \\case"}
{"input": "<s> -- | 'AlarmHistoryItem' constructor. <EOL> -- <EOL> -- The fields accessible through corresponding lenses are: <EOL> -- <EOL> -- * 'ahiAlarmName' @::@ 'Maybe' 'Text' <EOL> -- <EOL> -- * 'ahiHistoryData' @::@ 'Maybe' 'Text' <EOL> -- <EOL> -- * 'ahiHistoryItemType' @::@ 'Maybe' 'HistoryItemType' <EOL> -- <EOL> -- * 'ahiHistorySummary' @::@ 'Maybe' 'Text' <EOL> -- <EOL> -- * 'ahiTimestamp' @::@ 'Maybe' 'UTCTime' <EOL> -- <EOL> alarmHistoryItem :: AlarmHistoryItem <EOL> alarmHistoryItem = AlarmHistoryItem <EOL>     { _ahiAlarmName       = Nothing <EOL>     , _ahiTimestamp", "gt": "= Nothing", "prediction": " = Nothing"}
{"input": "<s> -- | <https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement.action Mozilla HTMLFormElement.action documentation>  <EOL> getAction :: <EOL>           (MonadDOM m, FromJSString result) => HTMLFormElement -> m result <EOL> getAction self <EOL>   =", "gt": "liftDOM ((self ^. js \"action\") >>= fromJSValUnchecked)", "prediction": " do"}
{"input": "<s> ------------------------------------------------------------------------------ <EOL> compiledSplices :: Splices (Splice (Handler App App)) <EOL> compiledSplices = do <EOL>   \"userSplice\" #! withSplices runChildren userCSplices $ <EOL>     lift $ maybe pass return =<<", "gt": "with auth currentUser", "prediction": " getParam \"email\""}
{"input": "<s> -- | vkCreateRenderPass - Create a new render pass object <EOL> -- <EOL> -- == Valid Usage (Implicit) <EOL> -- <EOL> -- -   #VUID-vkCreateRenderPass-device-parameter# @device@ /must/ be a <EOL> --     valid 'Vulkan.Core10.Handles.Device' handle <EOL> -- <EOL> -- -   #VUID-vkCreateRenderPass-pCreateInfo-parameter# @pCreateInfo@ /must/ <EOL> --     be a valid pointer to a valid 'RenderPassCreateInfo' structure <EOL> -- <EOL> -- -   #VUID-vkCreateRenderPass-pAllocator-parameter# If @pAllocator@ is <EOL> --     not @NULL@, @pAllocator@ /must/ be a valid pointer to a valid <EOL> --     'Vulkan.Core10.AllocationCallbacks.AllocationCallbacks' structure <EOL> -- <EOL> -- -   #VUID-vkCreateRenderPass-pRenderPass-parameter# @pRenderPass@ /must/ <EOL> --     be a valid pointer to a 'Vulkan.Core10.Handles.RenderPass' handle <EOL> -- <EOL> -- == Return Codes <EOL> -- <EOL> -- [<https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#fundamentals-successcodes Success>] <EOL> -- <EOL> --     -   'Vulkan.Core10.Enums.Result.SUCCESS' <EOL> -- <EOL> -- [<https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#fundamentals-errorcodes Failure>] <EOL> -- <EOL> --     -   'Vulkan.Core10.Enums.Result.ERROR_OUT_OF_HOST_MEMORY' <EOL> -- <EOL> --     -   'Vulkan.Core10.Enums.Result.ERROR_OUT_OF_DEVICE_MEMORY' <EOL> -- <EOL> -- = See Also <EOL> -- <EOL> -- <https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VK_VERSION_1_0 VK_VERSION_1_0>, <EOL> -- 'Vulkan.Core10.AllocationCallbacks.AllocationCallbacks', <EOL> -- 'Vulkan.Core10.Handles.Device', 'Vulkan.Core10.Handles.RenderPass', <EOL> -- 'RenderPassCreateInfo' <EOL> createRenderPass :: forall a io <EOL>                   . (Extendss RenderPassCreateInfo a, PokeChain a, MonadIO io) <EOL>                  => -- | @device@ is the logical device that creates the render pass. <EOL>                     Device <EOL>                  -> -- | @pCreateInfo@ is a pointer to a 'RenderPassCreateInfo' structure <EOL>                     -- describing the parameters of the render pass. <EOL>                     (RenderPassCreateInfo a) <EOL>                  -> -- | @pAllocator@ controls host memory allocation as described in the <EOL>                     -- <https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#memory-allocation Memory Allocation> <EOL>                     -- chapter. <EOL>                     (\"allocator\" ::: Maybe AllocationCallbacks) <EOL>                  ->", "gt": "io (RenderPass)", "prediction": " IO"}
{"input": "<s> -- | Gather all error free computations and ensure that at least one was error <EOL> -- free. <EOL> errorFree1 :: MonadPlus m => [m a] -> m [a] <EOL> errorFree1", "gt": "ms = do", "prediction": " [] = return []"}
{"input": "<s> -- | <https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction.error Mozilla IDBTransaction.error documentation>  <EOL> getError :: (MonadDOM m) => IDBTransaction -> m DOMError <EOL> getError self <EOL>   = liftDOM ((self ^. js", "gt": "\"error\") >>= fromJSValUnchecked)", "prediction": "_) . fromJSString)"}
{"input": "<s> -- | 'safeTail' for 'Either' <EOL> eSafeTail :: [a] -> Either String [a] <EOL> eSafeTail", "gt": "[] = Left \"Empty list!\"", "prediction": " [] = Left \"Empty list\""}
{"input": "<s> -- | Append two vectors to make a 'Push' vector <EOL> (++) :: (Pushy m vec1 a, Pushy m vec2 a, Monad m) => vec1 -> vec2 -> Push m a <EOL> vec1 ++ vec2 = Push (len1 + length v2) $ \\write -> <EOL>     dumpPush v1 write >> dumpPush v2 (write . (+len1)) <EOL>   where <EOL>     v1", "gt": "= toPush vec1", "prediction": " v"}
{"input": "<s> -- | Returns the position where the import declaration for the <EOL> --   new import should be put into the list of import declarations. <EOL> findImportPos :: HS.ImportDecl -> [HS.ImportDecl] -> Maybe ImportPos <EOL> findImportPos newImport imports", "gt": "= After <$> bestMatchingImport name imports", "prediction": " ="}
{"input": "<s> -- |Helper <EOL> startWithLowerCase :: Parser String <EOL> startWithLowerCase = liftA2 (:) lowerChar $", "gt": "many alphaNumChar", "prediction": " many"}
{"input": "<s> -- | maybeCloseTag will return `Just` the tag if it gets a TagClose with he given name, <EOL> -- It will return `Nothing` otherwise. <EOL> -- It is not case sensitive. <EOL> maybeCloseTag :: (StringLike str, Show", "gt": "str) => str -> TagParserSt str st ( Maybe (Tag str) )", "prediction": " str) => str -> Maybe str"}
{"input": "<s> -- | The description of the network interface. <EOL> dniarsDescription :: Lens' DescribeNetworkInterfaceAttributeResponse (Maybe AttributeValue) <EOL> dniarsDescription = lens", "gt": "_dniarsDescription (\\ s a -> s{_dniarsDescription = a})", "prediction": " _dniarsDescription (\\ s a -> s{_dniarsDescription = a})"}
{"input": "<s> -- | Initial, default value of spark stats, at the start of runtime, <EOL> -- before any spark activity is recorded. <EOL> initial :: SparkStats <EOL> initial =", "gt": "SparkStats 0 0 0 0 0 0 0 0 0", "prediction": " SparkStats"}
{"input": "<s> --charCand 'E' = E <EOL> balfun :: [(Cand, Nat)] -> Ballot <EOL> balfun ((A, b1) : (B, b2) : (C, b3) : (D, b4) {-: (E, b5) -}: _) = f where <EOL>   f :: Cand -> Nat <EOL>   f A = b1 <EOL>   f B = b2 <EOL>   f C", "gt": "= b3", "prediction": " = b3"}
{"input": "<s> -- TODO(arjun): why? <EOL> -- |Remove forwarding actions to ports other than p <EOL> justTo", "gt": ":: Port -> Policy -> Policy", "prediction": "Port :: PortID -> IO ()"}
{"input": "<s> pick :: Dist a -> R a <EOL> -- pick d = do {p <- Random.randomRIO (0,1); return (selectP p d)} <EOL> pick d = Random.randomRIO", "gt": "(0,1) >>= return . selectP d", "prediction": " (0,1) >>= return . selectP d"}
{"input": "<s> -- Compresses the given file to a new file with .gz appended to the filename. <EOL> gzipFile :: FilePath", "gt": "-> IO ()", "prediction": " -> IO ()"}
{"input": "<s> -- | The version message. <EOL> versionString :: String <EOL> versionString = <EOL>     \"The Haskell 16candles assembler: version 0.2.0.1 (2016.01.11)\\n\\ <EOL>     \\Copyright (C) 2014 Joe Jevnik.\\n\\ <EOL>     \\This is free software; see the source for copying \\ <EOL>     \\conditions.  There is", "gt": "NO\\nwarranty; not even for MERCHANTABILITY\\", "prediction": " no guarantee that the version string"}
{"input": "<s> {- <EOL>  - The <a href=\"https://en.wikipedia.org/wiki/Mean_anomaly\">mean anomaly at epoch. <EOL>  -} <EOL> getOrbitMeanAnomalyAtEpoch ::", "gt": "KRPCHS.SpaceCenter.Orbit -> RPCContext (Double)", "prediction": " TimeDouble] -> Double"}
{"input": "<s> -- | The document @(hcat xs)@ concatenates all documents @xs@ <EOL> --   horizontally with @(\\<\\>)@. <EOL> hcat \u2237 [Doc] \u2192 Doc <EOL> hcat =", "gt": "fold (<>)", "prediction": " fold (<>)"}
{"input": "<s> -- XXXXXXXXXXXXXXXX <EOL> lrc_string_index :: String -> Int -> Char <EOL> lrc_string_index s i", "gt": "= s!!i", "prediction": " ="}
{"input": "<s> {-|\r <EOL>     The '<.>' operator can also be used to calculate the inner product.\r <EOL> \r <EOL>     For example:\r <EOL> \r <EOL>     >>> (Vector [1,1,1]) <.> (Vector [1..10])\r <EOL>     6\r <EOL> -}\r <EOL> (<.>) :: Num a => Vector a", "gt": "-> Vector a -> a\r", "prediction": " -> Vector a -> Vector a"}
{"input": "<s> -- | Creates a value of 'JobInput' with the minimum fields required to make a request. <EOL> -- <EOL> -- Use one of the following lenses to modify other fields as desired: <EOL> -- <EOL> -- * 'jiFrameRate' <EOL> -- <EOL> -- * 'jiResolution' <EOL> -- <EOL> -- * 'jiAspectRatio' <EOL> -- <EOL> -- * 'jiEncryption' <EOL> -- <EOL> -- * 'jiKey' <EOL> -- <EOL> -- * 'jiDetectedProperties' <EOL> -- <EOL> -- * 'jiContainer' <EOL> -- <EOL> -- * 'jiInterlaced' <EOL> jobInput <EOL>     :: JobInput <EOL> jobInput = <EOL>     JobInput' <EOL>     { _jiFrameRate = Nothing <EOL>     , _jiResolution = Nothing <EOL>     , _jiAspectRatio = Nothing <EOL>     , _jiEncryption", "gt": "= Nothing", "prediction": " = Nothing"}
{"input": "<s> -------------------------------------------------------\r <EOL> foldl'Rnf :: (NFData a) => (a -> b", "gt": "-> a) -> a -> [b] -> a\r", "prediction": " -> a) -> a -> [b] -> a"}
{"input": "<s> -- | The number of cache behaviors for this distribution. <EOL> cbQuantity :: Lens' CacheBehaviors Int <EOL> cbQuantity = lens _cbQuantity", "gt": "(\\s a -> s { _cbQuantity = a })", "prediction": " (\\s a -> s { _cbQuantity = a })"}
{"input": "<s> -- | Read an `AdlibSample` from the monad state. <EOL> getAdlibSample ::", "gt": "Get AdlibSample", "prediction": " (libSample"}
